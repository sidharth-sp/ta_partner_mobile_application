#parse("/array.java.vm")
#if ($packageName)
//package $packageName;

#end##
package com.spintly;
import com.spintly.SuiteSetup;
import cucumber.api.CucumberOptions;
import cucumber.api.testng.AbstractTestNGCucumberTests;
import com.spintly.base.support.properties.PropertyUtility;
import org.openqa.selenium.WebDriver;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.Optional;
import org.testng.annotations.Parameters;
import com.spintly.runner.Hooks;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.Properties;
import java.io.IOException;
import org.apache.commons.lang3.ArrayUtils;
import com.spintly.web.utilityfunctions.GeneralUtility;

@CucumberOptions(
        strict = $strict,
        features = {"$featureFile"},
        plugin ={"com.spintly.base.support.cucumberEvents.EventsHandler"},
        monochrome = ${monochrome},
        #if(!$featureFile.contains(".feature:") && $tags)
        tags = #stringArray($tags),
        #end
        glue = #stringArray($glue))

public class $className extends AbstractTestNGCucumberTests {
    private static final String INITIAL_FILE_NAME="login";
    String lstallDevice;
	Hooks hooks;

	@Parameters({"test.Device","test.Platform","test.Environment","test.Category","appName"})
	public $className(@Optional("device1") String device, @Optional("android") String Platform, @Optional("QA") String environment, @Optional("sanity") String category, @Optional("partner") String appName){
	    String ClassName =this.getClass().getSimpleName();
        lstallDevice=device;
        System.setProperty("ALL_DEVICES",lstallDevice);
        System.setProperty("Platform", Platform);
        System.setProperty("DEVICE", device);
        System.setProperty("Parallel", "true");
        System.setProperty("LOGIN_FILE",INITIAL_FILE_NAME);
        System.setProperty("runner.class", ClassName);
        System.setProperty("appName", appName);
        PropertyUtility.environment=environment;
        PropertyUtility.targetPlatform=Platform;
        PropertyUtility.appName=appName;
        this.hooks = new Hooks();
	}

 	@Parameters({"NameWithtimestamp","test.Platform","test.Environment","test.Device"})
    @BeforeSuite
    public void start(@Optional("") String resultFolder,@Optional("android") String Platform, @Optional("QA") String environment, @Optional("device1") String device)
 	{
         try {this.hooks.start(resultFolder); }catch (Exception e){afterSuite(); e.printStackTrace(); }
 	}
    @AfterSuite
    public  void afterSuite() {
        try {this.hooks.tearDown();} catch (IOException e1) {  } }
	}